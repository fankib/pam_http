import sys
import json
from Crypto.Hash import SHA256
from Crypto.Random import random
from Crypto.PublicKey import ElGamal
from Crypto.Util.number import GCD
from Crypto.Protocol import KDF

is_linux = sys.platform == 'linux'
is_android = sys.platform == 'linux4'

server = 'http://localhost:5000'
generator = 9917414805094635192269004123972663839730378308321699993020469552936378795425881647428015997948778962711500593241874387295553479468087226286117930469790827188487556234424746404509187964366424627411469908177385792848361528017821165773509471818032462888233997026241709783871772919618418651081273591008300413394652448587172367382715553266071916341362774450671068981287028121415309575881269641060092997720147012684337387360482672652698157468482829691818941060842053533997449300215307764688522214460374861784601905887798049780221735036416733051890536398834635289268842863146257665683607077772415189639133100012013899544910
modulus = 18400719931780606010354578153091462964633015184876091368240036452055385384077399544428733433101442361631341566988837268545674028143749405972439006021144422893719466723671986917570830072171801082259227142605005237552561661606188301390914124891181333239143327574025532465581355977844230836416706703256776861964854385586768282258448845846065568103043142986542323786024680229601368682676065333920312423744260262488646206126992474717581279539460828197464556517500326310898847500827583162550722488450775517322558775014262873693909825130738374207846777833680207371838228375145103856193406043402799463632985439297892281117567

if is_linux:
	from urllib import request
if is_android:
	import urllib
	
def urlopen(url):
	print('urlopen: ' + url)
	if is_android:
		return urllib.urlopen(url)
	if is_linux:
		return request.urlopen(url)
	return None

def createSecretKey(secret):
	x_bytes = KDF.PBKDF2(secret, b'sjxA9e2$', 255, count=1000)
	x = int.from_bytes(x_bytes, byteorder='big')
	if ( not GCD(x,modulus-1)==1 ):
		x = modulus - 2 - x
	return x

def createPublicKey(secretKey):
	return pow(generator, secretKey, modulus)
	
def readChallenge():
	f = urlopen(server+'/challenge')
	return f.read(23)
	
def sendUnlockToken(token):
	f = urlopen(server+'/unlock/'+str(token[0])+'/'+str(token[1]))
	return f.readline().decode('ASCII')

def sendLockToken(token):
	f = urlopen(server+'/lock/'+str(token[0])+'/'+str(token[1]))
	return f.readline().decode('ASCII')
	
def createToken(secret):
	#x = 13151747660648615115260060218559997010120301609838596523552001639199686726228225369276114323052071670671403051109475002153764157620721349049715844170656676054539693280091031570490866829463764595178026316391813505141511337568780012560000543800064682527787730753459670196247907263499630514909329996445363545289785008549290608740616371048997026591211818691761707824431143260192485591100857559150612019051517254971384946919148837839468320542853134752644817111132407932362488764871920422566872117000725422119595414362964331828322285069221701520286423371103178740486683348769033041881114503663701348305519753157110862671923
	x = createSecretKey(secret)
	key = ElGamal.construct([modulus, generator, createPublicKey(x), x])
	challenge = readChallenge()
	h = SHA256.new(challenge).digest()
	while 1:
		k = random.StrongRandom().randint(1,key.p-1)
		if GCD(k,key.p-1)==1: break
	sig = key.sign(h,k)
	return sig
	
def unlock(secret):
	return sendUnlockToken(createToken(secret))
	
def lock(secret):
	return sendLockToken(createToken(secret))
	
if __name__ == '__main__':
	secret = 'supersecret'
	x = createSecretKey(secret)
	y = createPublicKey(x)
	print('x', x)
	print('y', y)
	print(unlock(secret))
	
